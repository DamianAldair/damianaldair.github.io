---
interface Props {
    img: string;
    name: string;
    description: string;
    skills: string[];
    url?: string;
}

const { img, name, description, skills, url } = Astro.props;

const borderradius = 5;
const padding = 20;
const iconsize = 30;
const arrowsize = 18;

const path = `/images/${img}`;
---

<article>
    <img class="project-img" src={path} alt={name} />
    <a class="fullscreen-btn"
        href={path}
        target="_blank"
        rel="noopener noreferrer"
    >
        <svg viewBox="0 0 448 512"
            height="1em"
            xmlns="http://www.w3.org/2000/svg">
            <path
                d="M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z"
            ></path>
        </svg>
        <span class="tooltip">Ver imagen a pantalla completa</span>
    </a>

    <div class="details">
        <h3>{name}</h3>
        <p>{description}</p>
        <div class="skills">
            {
                skills.map(
                (s) =>(
                    <img src=`/icons/${s}.svg` alt={s} width={iconsize} height={iconsize} />
                ))
            }
        </div>
        {
            url && (
                <a class="more" href={url} target="_blank" rel="noopener noreferrer">
                    Ver m√°s ...
                    <svg
                        class="arrow"
                        width={arrowsize}
                        height={arrowsize}
                        viewBox="0 0 24 24"
                        stroke-width="2"
                        stroke="currentColor"
                        fill="none"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <path
                            stroke="none"
                            d="M0 0h24v24H0z"
                            fill="none"
                        />
                        <path d="M5 12l14 0" />
                        <path d="M13 18l6 -6" />
                        <path d="M13 6l6 6" />
                    </svg>
                </a>
            )
        }
    </div>
</article>

<style define:vars={{ borderradius, padding }}>
    article {
        border-radius: calc(1px * var(--borderradius));
        background-color: var(--bg-card);
        color: black;
        width: calc((100% - 40px) / 2);
        position: relative;
    }

    .project-img {
        border-top-left-radius: calc(1px * var(--borderradius));
        border-top-right-radius: calc(1px * var(--borderradius));
        border-bottom: 1px solid rgb(10 10 55);
        width: 100%;
        height: 200px;
        object-fit: cover;
        object-position: left top;
    }

    .fullscreen-btn {
        width: 20px;
        height: 20px;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s;
        overflow: hidden;
        position: absolute;
        top: 15px;
        right: 15px;
        background-color: rgb(255 255 255 / 65%);
        border-radius: 100px;
        padding: 7px;
    }
    
    .fullscreen-btn svg {
        height: 100%;
    }

    .fullscreen-btn:hover {
        width: 25px;
        height: 25px;
        overflow: visible;
        padding: 10px;
        margin-top: -5px;
        margin-right: -5px;
    }

    .tooltip {
        position: absolute;
        top: -90px;
        background-color: rgba(0, 0, 0, 0.753);
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.8em;
        transition: all 0.3s;
        opacity: 0;
    }

    .fullscreen-btn:hover .tooltip {
        transform: translateY(2.5px);
        opacity: 1;
    }

    .details {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: flex-start;
        padding: calc(1px * var(--padding));
    }

    h3 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;  
        overflow: hidden;
        margin: 0;
        font-weight: 500;
    }

    p {
        --lines: 4;
        display: -webkit-box;
        -webkit-line-clamp: var(--lines);
        -webkit-box-orient: vertical;  
        overflow: hidden;
        height: calc(1.7rem * var(--lines));
    }

    .skills {
        display: flex;
        flex-direction: row;
        gap: 10px;
        margin: 20px 0;
    }

    .more {
        --color: rgb(10 10 55);
        text-decoration: none;
        color: var(--color);
        border: 1px solid var(--color);
        border-radius: 5px;
        padding: 8px 25px;
        display: inline-flex;
        align-items: center;
        flex-direction: row;
        flex-wrap: nowrap;
        transition: all 0.1s cubic-bezier(0.4, 0, 1, 1);
        gap: 15px;
    }

    .more:hover {
        background-color: rgba(130 130 220 / 45%);
        padding-right: 23px;
        gap: 17px;
    }

    @media screen and (max-width: 800px) {
        article {
            width: 100%;
        }

        p {
            --lines: 2;
            height: calc(1.7rem * var(--lines));
        }
    }

    @media screen and (max-width: 700px) {
        p {
            height: calc(2rem * var(--lines));
        }
    }

    @media screen and (max-width: 500px) {
        p {
            height: calc(3rem * var(--lines));
        }
    }

    @media screen and (max-width: 420px) {
        p {
            height: calc(3.5rem * var(--lines));
        }
    }
</style>
