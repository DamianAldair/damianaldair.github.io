---
interface Props {
    img: string;
    name: string;
    description: string;
    skills: string[];
    url?: string;
}

const { img, name, description, skills, url } = Astro.props;

const borderradius = 5;
const padding = 20;
const width = 500;
const hight = 500;
const iconsize = 30;
const arrowsize = 18;
---

<article>
    <img class="project-img" src=`/images/${img}` alt={name} />
    <div class="details">
        <h3>{name}</h3>
        <p>{description}</p>
        <div class="skills">
            {
                skills.map(
                (s) =>(
                    <img src=`/icons/${s}.svg` alt={s} width={iconsize} height={iconsize} />
                ))
            }
        </div>
        {
            url && (
                <a href={url} target="_blank" rel="noopener noreferrer">
                    Ver m√°s ...
                    <svg
                        class="arrow"
                        width={arrowsize}
                        height={arrowsize}
                        viewBox="0 0 24 24"
                        stroke-width="2"
                        stroke="currentColor"
                        fill="none"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <path
                            stroke="none"
                            d="M0 0h24v24H0z"
                            fill="none"
                        />
                        <path d="M5 12l14 0" />
                        <path d="M13 18l6 -6" />
                        <path d="M13 6l6 6" />
                    </svg>
                </a>
            )
        }
    </div>
</article>

<style define:vars={{ borderradius, padding }}>
    article {
        border-radius: calc(1px * var(--borderradius));
        background-color: var(--bg-card);
        color: black;
        width: calc((100% - 40px) / 2);
    }

    @media screen and (max-width: 800px) {
        article {
            width: 100%;
        }
    }

    .project-img {
        border-top-left-radius: calc(1px * var(--borderradius));
        border-top-right-radius: calc(1px * var(--borderradius));
        border-bottom: 1px solid black;
        width: 100%;
        height: 200px;
        object-fit: cover;
        object-position: left top;
    }

    .details {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: flex-start;
        padding: calc(1px * var(--padding));
    }

    h3 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;  
        overflow: hidden;
    }

    p {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;  
        overflow: hidden;
        height: 4rem;
    }

    .skills {
        display: flex;
        flex-direction: row;
        gap: 10px;
    }

    a {
        --color: blue;
        text-decoration: none;
        color: var(--color);
        border: 1px solid var(--color);
        border-radius: 5px;
        padding: 8px 25px;
        margin: 15px 0;
        display: inline-flex;
        align-items: center;
        flex-direction: row;
        flex-wrap: nowrap;
        transition: all 0.1s cubic-bezier(0.4, 0, 1, 1);
        gap: 15px;
    }

    a:hover {
        background-color: rgba(60, 62, 190, 0.15);
        padding-right: 23px;
        gap: 17px;
    }
</style>
